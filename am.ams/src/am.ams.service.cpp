#include "../include/am.ams.service.hpp"
#include "am.auth.protocol.hpp"
#include <thread>

namespace ams {
	// Constructor
	AntimalwareService::AntimalwareService(Tracer& tracer) noexcept:
		Service(tracer, L"AntimalwareService"), ptrUIPipe(nullptr),
		ptrWDPipe(nullptr) { }

	// Function prototypes
	void UIPipeThreadFunc(ipc::NewPipe*) noexcept;
	//
	//

	// Init Service return non-zero value in current implementation
	DWORD AntimalwareService::Init() noexcept {
		ptrUIPipe = new ipc::NewPipe(TEXT("UIPipe"), 32);
		ptrWDPipe = new ipc::NewPipe(TEXT("WDPipe"), 32);
		return DWORD(0);
	}

	// Main Service Function
	void AntimalwareService::DoWork() noexcept {
		using ipc::NewPipe;
		//NewPipe UIPipe(TEXT("UIPipe"), 32);
		std::thread UIPipeThread(UIPipeThreadFunc, ptrUIPipe);
		UIPipeThread.detach();
	}

	// Stop Service return non-zero value in current implementation
	DWORD AntimalwareService::DoStop() noexcept {
		delete ptrUIPipe;
		delete ptrWDPipe;
		return DWORD(0);
	}

	// Simple authorization protocol, reading message from UIPipe
	void UIPipeThreadFunc(ipc::NewPipe* ptrUIPipe) noexcept {
		DWORD incomMsg;
		while (true) {
			ptrUIPipe->WaitIncomingMsg();
			auth::AuthOwner(*ptrUIPipe, incomMsg);
			if (incomMsg != 0);
		}
	}

	// Constructor
	AntimalwareServiceFactory::AntimalwareServiceFactory(std::shared_ptr<Tracer>& _tracer) noexcept:
		tracer(std::move(_tracer)) { }

	// Create AntimalwareService from Factory Class
	std::unique_ptr<Service> AntimalwareServiceFactory::Create() {
		return std::make_unique<AntimalwareService>(*tracer);
	}
}
