#include "../include/am.ams.service.hpp"
#include "am.auth.protocol.hpp"
#include <thread>

namespace ams {
	// Constructor
	AntimalwareService::AntimalwareService(Tracer& tracer) noexcept:
		Service(tracer, L"AntimalwareService") { }

	// Function prototypes
	void UIPipeThreadFunc() noexcept;
	//
	//

	// Init Service return non-zero value in current implementation
	DWORD AntimalwareService::Init() noexcept {
		std::thread UIPipeThread(UIPipeThreadFunc);
		UIPipeThread.detach();
		return DWORD(0);
	}

	// Main Service Function
	void AntimalwareService::DoWork() noexcept {
		Sleep(10000);
	}

	// Stop Service return non-zero value in current implementation
	DWORD AntimalwareService::DoStop() noexcept {
		return DWORD(0);
	}

	// Simple authorization protocol, reading message from UIPipe
	void UIPipeThreadFunc() noexcept {
		DWORD incomMsg;
		ipc::NewPipe UIPipe(TEXT("UIPipe"), 32);
		while (true) {
			UIPipe.WaitIncomingMsg();
			auth::AuthOwner(UIPipe, incomMsg);
			if (incomMsg != 0);
		}
	}

	// Constructor
	AntimalwareServiceFactory::AntimalwareServiceFactory(std::shared_ptr<Tracer>& _tracer) noexcept:
		tracer(std::move(_tracer)) { }

	// Create AntimalwareService from Factory Class
	std::unique_ptr<Service> AntimalwareServiceFactory::Create() {
		return std::make_unique<AntimalwareService>(*tracer);
	}
}
