#include "../include/am.ams.service.hpp"
#include "am.auth.protocol.hpp"
#include <thread>

namespace ams {
	// Constructor
	AntimalwareService::AntimalwareService(LogTracer& tracer) noexcept:
		Service(tracer, L"AntimalwareService") { }

	// Function prototypes
	void UIPipeThreadFunc() noexcept;
	void UIClient() noexcept;
	//
	//

	// Init Service return non-zero value in current implementation
	DWORD AntimalwareService::Init() noexcept {
		std::thread UIPipeThread(UIPipeThreadFunc);
		UIPipeThread.detach();
		Sleep(2);
		std::thread UIClientThread(UIClient);
		UIClientThread.detach();
		return DWORD(0);
	}

	// Main Service Function
	void AntimalwareService::DoWork() noexcept {
		Sleep(10000);
	}

	// Stop Service return non-zero value in current implementation
	DWORD AntimalwareService::DoStop() noexcept {
		return DWORD(0);
	}

	// Simple authorization protocol, reading message from UIPipe
	void UIPipeThreadFunc() noexcept {
		using ipc::ServerPipe;
		DWORD incomMsg;
		ServerPipe UIPipe(TEXT("UIPipe"), 32);
		while (true) {
			UIPipe.WaitIncomingMsg();
			auth::AuthServer(UIPipe, incomMsg);
			if (incomMsg != 0) {
				// DEBUG
				std::wofstream out("E:\\Test.txt", std::ios::app);
				out << L"UIServer get msg from UIClient!\n\n";
				out.close();
			}
		}
	}

	// DEBUG
	void UIClient() noexcept {
		try {
			DWORD requestStatus;
			enum MsgType { Start = 1, Stop = 2, Shutdown = 3 };
			ipc::ClientPipe UIClient(TEXT("UIPipe"));
			UIClient.SendMsg(MsgType::Start);
			auth::AuthClient(UIClient, requestStatus);
			if (static_cast<auth::AuthStatus>(requestStatus) == auth::AuthStatus::Connected) {
				// DEBUG
				std::wofstream out("E:\\Test.txt", std::ios::app);
				out << L"UIClient Connected!\n\n";
				out.close();
			}
			else {
				// DEBUG
				std::wofstream out("E:\\Test.txt", std::ios::app);
				out << L"UIClient Disconnected!\n\n";
				out.close();
			}
		}
		catch (std::runtime_error& ex) {
			std::string str1(ex.what());
			std::wstring str2(str1.begin(), str1.end());
			// DEBUG
			std::wofstream out("E:\\Test.txt", std::ios::app);
			out << str2.c_str() << L"\n\n";
			out.close();
		}
	}

	// Constructor
	AntimalwareServiceFactory::AntimalwareServiceFactory(std::shared_ptr<LogTracer>& _tracer) noexcept:
		tracer(std::move(_tracer)) { }

	// Create AntimalwareService from Factory Class
	std::unique_ptr<Service> AntimalwareServiceFactory::Create() {
		return std::make_unique<AntimalwareService>(*tracer);
	}
}
