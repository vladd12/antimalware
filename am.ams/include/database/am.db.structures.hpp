#ifndef AM_DB_STRUCTURES_H
#define AM_DB_STRUCTURES_H

#include <cstdint>
#include <memory>
#include <Windows.h>
#include "../hash/am.hash.sha256.hpp"

namespace database {
	// Offset of signature's location in file
	class SignatureOffset {
	public:
		uint32_t StartOffset;
		uint32_t EndOffset;

		// Constructor
		SignatureOffset() noexcept:
			StartOffset(0), EndOffset(0) { }

	}; // Size: 8 bytes

	// Signature class
	class Signature {
	public:
		uint8_t FirstBytes[8];   // First 8 bytes of signature
		uint32_t Length;         // Length of signature
		SignatureOffset Offset;  // Offset of signature
		hash::SHA256Hash Hash;   // Hash value of signature

		// Constructor
		Signature() noexcept: FirstBytes{ 0 },
			Length(0), Offset(), Hash() { }

	}; // Size: 52 bytes

	// Record in DB structure
	class Record {
	public:
		char* Name;				 // Signature name
		std::size_t NameLength;  // Length of signature name
		Signature Signature;     // Signature object

		// Constructor
		Record() noexcept: Name(nullptr),
			NameLength(0), Signature() { }

		// Destructor
		~Record() noexcept {
			if (Name != nullptr) delete[] Name;
		}

		// Alloc memory for C-string with signature's name 
		void AllocName(std::size_t nameLen) noexcept {
			if (Name == nullptr) {
				NameLength = nameLen;
				Name = new char[NameLength + 1];
				// Fill string by zeros
				memset(Name, NULL, NameLength + 1);
			}
		}

	};

}

#endif // AM_DB_STRUCTURES_H
