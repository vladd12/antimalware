#include "../am.db.structures.hpp"

namespace db {
	// SignatureRange constructor
	SignatureRange::SignatureRange() noexcept:
	   Start(0), End(0) { }

	// SignatureRange constructor with params
	SignatureRange::SignatureRange(uint32_t start, uint32_t end)
		noexcept : Start(start), End(end) { }

	// Signature constructor
	Signature::Signature() noexcept :
		FirstBytes{ 0 }, Length(0),
		Range(), Hash() { }

	// Record constructor
	Record::Record() noexcept : Name(nullptr),
		NameLength(0), Signature() { }

	// Record copying constructor
	Record::Record(const Record& rhs) noexcept : Name(nullptr) {
		AllocName(rhs.NameLength);
		CopyName(rhs.Name);
		Signature = rhs.Signature;
	}

	// Record destructor
	Record::~Record() noexcept {
		if (Name != nullptr) delete[] Name;
	}

	// Alloc memory for C-string with signature's name 
	void Record::AllocName(uint8_t nameLen) noexcept {
		if (Name == nullptr) {
			NameLength = nameLen;
			Name = new char[NameLength + 1];
			// Fill string by zeros
			memset(Name, NULL, NameLength + 1);
		}
	}

	// Copy data from string
	void Record::CopyName(const char* src) noexcept {
		memcpy_s(Name, NameLength + 1, src, strnlen_s(src, 256) + 1);
	}

}
