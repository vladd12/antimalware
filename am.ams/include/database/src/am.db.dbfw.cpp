#include "../am.db.dbfile.hpp"

namespace db {
	// Opening file for writing
	bool DBFileWriter::Open(PCWSTR filePath) {
		std::size_t dbSigLength = strnlen_s(DBSignature, 256);
		if (filePath == nullptr) return false;
		// If file don't exisiting create it with DBFile signature
		else if (!IsFileExistW(filePath)) {
			hFile.open(filePath, std::ios::out | std::ios::binary);
			if (!IsOpen()) return false;
			// Writing signature of database file
			hFile.write(DBSignature, dbSigLength);
			// Writing count of records in database file
			hFile.write(reinterpret_cast<char*>(&RecordCount), sizeof(RecordCount));
		}
		// Else open it and check file signature
		else {
			hFile.open(filePath, std::ios::in | std::ios::out | std::ios::binary);
			if (!IsOpen() || !hFile) return false;
			// Check signature
			char* sign = new char[dbSigLength];
			hFile.read(sign, dbSigLength);
			// If don't accepted
			if (memcmp(sign, DBSignature, dbSigLength)) {
				delete[] sign;
				CloseFile();
				return false;
			}
			// Else read record count
			else {
				delete[] sign;
				hFile.read(reinterpret_cast<char*>(&RecordCount), sizeof(RecordCount));
			}
		}
		return true;
	}

	// Get record from request
	Record DBFileWriter::GetRecord(PCWSTR filePath, PCSTR sigName, uint32_t& offset, uint32_t& length, SignatureRange& range) {
		Record rec;
		// Copy signature name
		rec.AllocName(strnlen_s(sigName, 256));
		rec.CopyName(sigName);
		// Copy length and range
		rec.Signature.Length = length;
		rec.Signature.Range = range;

		// Copy first 8 bytes
		std::ifstream file(filePath);
		file.seekg(offset, std::ios::beg);
		file.read(reinterpret_cast<char*>(&rec.Signature.FirstBytes), 8);

		// Copy signature in buffer and calculate hash
		uint8_t* buffer = new uint8_t[length];
		file.seekg(offset, std::ios::beg);
		file.read(reinterpret_cast<char*>(buffer), length);
		rec.Signature.Hash = hash::GetSHA256(buffer, static_cast<size_t>(length));
		delete[] buffer;
		return rec;
	}

	// DBFileWriter constructor for wide string
	DBFileWriter::DBFileWriter(PCWSTR filePath) noexcept(false) : DBFile() {
		Open(filePath);
	}

	// DBFileWriter constructor for ASCII string
	DBFileWriter::DBFileWriter(PCSTR filePath) noexcept(false) : DBFile() {
		const std::size_t cSize = strlen(filePath) + 1;
		std::size_t retVal;
		PWSTR wFilePath = new wchar_t[cSize];
		mbstowcs_s(&retVal, wFilePath, cSize, filePath, cSize - 1);
		if (retVal == cSize) {
			Open(wFilePath);
			delete[] wFilePath;
		}
		else {
			delete[] wFilePath;
			throw std::runtime_error("String coverting error");
		}
	}

	// Add record in database file
	bool DBFileWriter::AddRecord(Record& record) {
		if (!IsOpen()) return false;
		// Go to end of file
		hFile.seekp(0, std::ios::end);
		// Write record in database file
		hFile.write(reinterpret_cast<char*>(&record.NameLength), sizeof(std::size_t));           // Name length
		hFile.write(record.Name, record.NameLength);                                            // Name
		hFile.write(reinterpret_cast<char*>(&record.Signature.FirstBytes), 8);                   // First 8 bytes of signature
		hFile.write(reinterpret_cast<char*>(&record.Signature.Length), sizeof(uint32_t));        // Signature length
		hFile.write(reinterpret_cast<char*>(&record.Signature.Range.Start), sizeof(uint32_t));   // Signature range start
		hFile.write(reinterpret_cast<char*>(&record.Signature.Range.End), sizeof(uint32_t));     // Signature range end
		hFile.write(reinterpret_cast<char*>(&record.Signature.Hash.hash), 8 * sizeof(uint32_t)); // Hash value of signature
		hFile.seekp(strnlen_s(DBSignature, 256), std::ios::beg);
		RecordCount++;  // Increase record counter
		hFile.write(reinterpret_cast<char*>(&RecordCount), sizeof(DWORD));
		return true;
	}

	// Add record in database from file
	bool DBFileWriter::AddRecord(PCWSTR filePath, PCSTR sigName, uint32_t offset, uint32_t length, SignatureRange range) {
		if (filePath == nullptr || sigName == nullptr || !IsOpen()) return false;
		else return AddRecord(GetRecord(filePath, sigName, offset, length, range));
	}

	// Add record in database from file
	bool DBFileWriter::AddRecord(PCSTR filePath, PCSTR sigName, uint32_t offset, uint32_t length, SignatureRange range) {
		const std::size_t cSize = strlen(filePath) + 1;
		std::size_t retVal;
		PWSTR wFilePath = new wchar_t[cSize];
		mbstowcs_s(&retVal, wFilePath, cSize, filePath, cSize - 1);
		if (retVal == cSize) {
			bool ret = AddRecord(wFilePath, sigName, offset, length, range);
			delete[] wFilePath;
			return ret;
		}
		else {
			delete[] wFilePath;
			return false;
		}
	}

}
