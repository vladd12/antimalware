#ifndef AM_AMS_SERVICE_H
#define AM_AMS_SERVICE_H

#include <atomic>
#include "am.slib.service.hpp"
#include "am.trace.log-tracer.hpp"
#include "am.auth.protocol.hpp"
#include "scan\am.scan.scanner.hpp"
#include "database\am.db.recbatch.hpp"

namespace ams {
	using slib::Service;
	using slib::LogTracer;
	using slib::IServiceFactory;

	// Antimalware Service Class
	class AntimalwareService : public Service {
	public:
		// Constructor
		explicit AntimalwareService(LogTracer&) noexcept;

	protected:
		// Init Service return non-zero value in current implementation
		virtual DWORD Init() noexcept override;

		// Main Service Function
		virtual void DoWork() noexcept override;

		// Stop Service return non-zero value in current implementation
		virtual DWORD DoStop() noexcept override;

	private:
		ipc::ServerPipe* UIPipe;        // Pipe for UI Client
		ipc::ServerPipe* WDPipe;        // Pipe for watch dog service
		scan::TaskQueue* tq;            // Task queue for files
		scan::MultiThreadScanner* mts;	// Multi thread scanner instance
		std::atomic_bool state;         // State for main thread
		db::DBFileReader dbfr;          // Database file reader
		db::DBFileWriter dbfw;          // Database file writer
		db::RecordBatch rb;             // Batch of records

		// Simple authorization protocol, reading message from UIPipe
		static void UIPipeThreadFunc(AntimalwareService* ptrAMS) noexcept;
		// Simple authorization protocol, reading message from WDPipe
		static void WDPipeThreadFunc(AntimalwareService* ptrAMS) noexcept;

		// Choose action for doing
		void ChooseAction(ipc::MessageHolder& msg, trace::LogTracer& tracer) noexcept;

		// Set service in received state
		void ControlService(ipc::ControlMessage& ctrlMsg, trace::LogTracer& tracer) noexcept;

		// Pass tasks container to queue of tasks
		void TaskHandler(ipc::TasksContainer& tCon, trace::LogTracer& tracer) noexcept;

		// Scanning status handler
		void ScanStatusHandler(ipc::ScanningStat& scStat, trace::LogTracer& tracer) noexcept;

	};

	// Antimalware Service Factory Class
	class AntimalwareServiceFactory : public IServiceFactory {
	private:
		std::shared_ptr<LogTracer> tracer;
	public:
		// Constructor
		AntimalwareServiceFactory(std::shared_ptr<LogTracer>&) noexcept;

		// Create AntimalwareService from Factory Class
		virtual std::unique_ptr<Service> Create() override;
	};

}

#endif // AM_AMS_SERVICE_H
