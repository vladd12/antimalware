#ifndef AM_AMS_SERVICE_H
#define AM_AMS_SERVICE_H

#include "am.slib.service.hpp"
#include "am.ipc.new-pipe.hpp"

namespace ams {
	using slib::Service;
	using slib::Tracer;
	using slib::IServiceFactory;

	// Antimalware Service Class
	class AntimalwareService : public Service {
	private:
		ipc::NewPipe *ptrUIPipe, *ptrWDPipe;
	public:
		// Constructor
		explicit AntimalwareService(Tracer&) noexcept;

	protected:
		// Init Service return non-zero value in current implementation
		virtual DWORD Init() noexcept override;

		// Main Service Function
		virtual void DoWork() noexcept override;

		// Stop Service return non-zero value in current implementation
		virtual DWORD DoStop() noexcept override;
	};

	// Antimalware Service Factory Class
	class AntimalwareServiceFactory : public IServiceFactory {
	private:
		std::shared_ptr<Tracer> tracer;
	public:
		// Constructor
		AntimalwareServiceFactory(std::shared_ptr<Tracer>&) noexcept;

		// Create AntimalwareService from Factory Class
		virtual std::unique_ptr<Service> Create() override;
	};






}

#endif // AM_AMS_SERVICE_H
