#ifndef AM_AMS_SERVICE_H
#define AM_AMS_SERVICE_H

#include <atomic>
#include "am.slib.service.hpp"
#include "am.ipc.scm.hpp"
#include "scan\am.scan.scanner.hpp"
#include "database\am.db.recbatch.hpp"

namespace ams {
	using slib::Service;
	using slib::LogTracer;
	using slib::IServiceFactory;

	// Antimalware Service Class
	class AntimalwareService : public Service {
	public:
		// Constructor
		explicit AntimalwareService(LogTracer&) noexcept;

	protected:
		// Init Service return non-zero value in current implementation
		virtual DWORD Init() noexcept override;

		// Main Service Function
		virtual void DoWork() noexcept override;

		// Stop Service return non-zero value in current implementation
		virtual DWORD DoStop() noexcept override;

	private:
		ipc::ServerConnectionManager SCM; // Server connection manager
		std::atomic_bool state;	          // State for main thread
		db::DBFileReader dbfr;            // Database file reader
		db::DBFileWriter dbfw;            // Database file writer
		HANDLE evSync;                    // Event for synchronization

		// Reading message from WDPipe
		static void WDPipeThreadFunc(AntimalwareService* ptrAMS) noexcept;

		// Client requests executor thread function
		static void ClientThread(
			ipc::ServerPipe* connection,
			AntimalwareService* ptrAMS
			) noexcept;

		// Create event for synchronization
		HANDLE CreateSyncEvent(const char* evName) noexcept;

		// Set service in received state
		friend void ControlService(AntimalwareService*, ipc::ControlMessage&) noexcept;

	};

	// Antimalware Service Factory Class
	class AntimalwareServiceFactory : public IServiceFactory {
	private:
		std::shared_ptr<LogTracer> tracer;
	public:
		// Constructor
		AntimalwareServiceFactory(std::shared_ptr<LogTracer>&) noexcept;

		// Create AntimalwareService from Factory Class
		virtual std::unique_ptr<Service> Create() override;
	};

}

#endif // AM_AMS_SERVICE_H
