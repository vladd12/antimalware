#include <exception>
#include <iomanip>
#include <stdexcept>
#include <Windows.h>
#include "am.tests.tester.hpp"

namespace tests {
	/* --- Function prototypes --- */
	// Return console width in characters
	uint GetConsoleCharWidth() noexcept(false);

	// Default constructor
	Tester::Tester() noexcept: _passed(0), _failed(0) { }

	// Constructor with parameters
	Tester::Tester(uint passed, uint failed) noexcept :
		_passed(passed), _failed(failed) { }

	// Copying constructor
	Tester::Tester(const Tester& rhs) noexcept:
		_passed(rhs._passed), _failed(rhs._failed) { }

	// Copying operator "="
	const Tester& Tester::operator=(const Tester& rhs) noexcept {
		_passed = rhs._passed;
		_failed = rhs._failed;
		return *this;
	}

	// Destructor
	Tester::~Tester() noexcept {
		using namespace std;
		// Calculate total num of tests, percent of passed and failed tests
		uint _total, _passed_perc, _failed_perc, _conWidth, _halfWidth;
		_total = _passed + _failed;
		if (_total) {
			_passed_perc = (_passed / _total) * 100;
			_failed_perc = (_failed / _total) * 100;
		}
		else {
			_passed_perc = 0;
			_failed_perc = 0;
		}
		
		// Getting console width in characters
		try {
			_conWidth = GetConsoleCharWidth();
		}
		catch (std::runtime_error& ex) {
			cout << "FATAL ERROR: " << ex.what() << endl;
			_conWidth = 120;
		}
		// Half of console width
		_halfWidth = (_conWidth / 2) - 8;

		// Magic nums: 15 = length of string in center of console,
		// 8 = half length of string in center of console (with round),
		// 14 = 15 - 1, 1 - first symbol
		cout << '[' << setfill('=') << setw(_halfWidth + 14)
			<< " Tests Results " << setw(_halfWidth) << ']' << endl;
	}

	// Returns the number of passed tests
	uint Tester::GetPassedNum() noexcept {
		return _passed;
	}

	// Returns the number of failed tests
	uint Tester::GetFailedNum() noexcept {
		return _failed;
	}

	// Returns total tests number
	uint Tester::GetTotalNum() noexcept {
		return uint();
	}

	// Return console width in characters
	uint GetConsoleCharWidth() noexcept(false) {
		HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
		if (hConsole != INVALID_HANDLE_VALUE && hConsole != NULL) {
			CONSOLE_SCREEN_BUFFER_INFO consoleInfo;
			if (GetConsoleScreenBufferInfo(hConsole, &consoleInfo) != NULL) {
				uint width = consoleInfo.srWindow.Right - consoleInfo.srWindow.Left + 1;
				return width;
			}
			else throw std::runtime_error("Failed getting console screen buffer info");
		}
		else throw std::runtime_error("Failed getting console handle");
	}

}
