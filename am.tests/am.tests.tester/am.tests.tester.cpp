#include <cassert>
#include <exception>
#include <iomanip>
#include <stdexcept>
#include <string>
#include <Windows.h>
#include "am.tests.tester.hpp"

namespace tests {
	/* ----- Function prototypes ----- */
	// Return console width in characters
	uint GetConsoleCharWidth() noexcept(false);
	// Print C-string at center of console
	void PrintTextAtCenter(const char*) noexcept;
	// Print STL string at center of console
	void PrintTextAtCenter(std::string&) noexcept;
	/* --- End function prototypes --- */

	// Default constructor
	Tester::Tester() noexcept:
		_passed(0), _failed(0),
		_start(clock()), _end(0)
	{ 
		PrintTextAtCenter(" Test Session Started ");
	}

	// Constructor with parameters
	Tester::Tester(uint passed, uint failed) noexcept:
		_passed(passed), _failed(failed),
		_start(clock()), _end(0) 
	{ 
		PrintTextAtCenter(" Test Session Started ");
	}

	// Copying constructor
	Tester::Tester(const Tester& rhs) noexcept:
		_passed(rhs._passed), _failed(rhs._failed),
		_start(rhs._start), _end(rhs._end) { }

	// Copying operator "="
	const Tester& Tester::operator=(const Tester& rhs) noexcept {
		_passed = rhs._passed;
		_failed = rhs._failed;
		_start = rhs._start;
		_end = rhs._end;
		return *this;
	}

	// Destructor
	Tester::~Tester() noexcept {
		using namespace std;
		// Calculate total num of tests, percent of passed and failed tests
		uint _total(_passed + _failed); 
		float _passed_perc, _failed_perc;
		if (_total) {
			_passed_perc = (float(_passed) / _total) * 100.0f;
			_failed_perc = (float(_failed) / _total) * 100.0f;
		}
		else {
			_passed_perc = 0;
			_failed_perc = 0;
		}
		
		// Output results of testing
		cout << fixed << showpoint << setprecision(2);
		cout << "Total tests num: " << _total << "\nPassed tests num: "
			<< _passed << "\nFailed tests num: " << _failed 
			<< "\nPassed tests percent: " << _passed_perc
			<< " %\nFailed tests percent: " << _failed_perc << " %\n";
		PrintTextAtCenter(" Test Session Finished ");
	}

	// Returns the number of passed tests
	uint Tester::GetPassedNum() noexcept {
		return _passed;
	}

	// Returns the number of failed tests
	uint Tester::GetFailedNum() noexcept {
		return _failed;
	}

	// Returns total tests number
	uint Tester::GetTotalNum() noexcept {
		return _passed + _failed;
	}

	// Benchmark test with assertation
	void BenchmarkTest(Tester& tester) noexcept {
		assert(tester.GetPassedNum() == tester.GetTotalNum() && "Benchmark Test Failed!");
		std::cout << "Benchmark Test Passed.\n";
	}
	
	// Return console width in characters
	uint GetConsoleCharWidth() noexcept(false) {
		HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
		if (hConsole != INVALID_HANDLE_VALUE && hConsole != NULL) {
			CONSOLE_SCREEN_BUFFER_INFO consoleInfo;
			if (GetConsoleScreenBufferInfo(hConsole, &consoleInfo) != NULL) {
				uint width = consoleInfo.srWindow.Right - consoleInfo.srWindow.Left + 1;
				return width;
			}
			else throw std::runtime_error("Failed getting console screen buffer info");
		}
		else throw std::runtime_error("Failed getting console handle");
	}

	// Print C-string at center of console
	void PrintTextAtCenter(const char* text) noexcept {
		using namespace std;
		// Variables in start
		uint _conWidth, _halfWidth, _startTab, _textLength(static_cast<uint>(strlen(text))),
			_halfTextLength((_textLength % 2 == 0) ? (_textLength / 2) : ((_textLength / 2) + 1));

		// Getting console width in characters
		try {
			_conWidth = GetConsoleCharWidth();
		}
		catch (std::runtime_error& ex) {
			cout << "FATAL ERROR: " << ex.what() << endl;
			_conWidth = 120;
		}

		// Output in console
		_halfWidth = (_conWidth / 2) - _halfTextLength;
		_startTab = (_textLength % 2 == 0) ? (_halfWidth + _textLength - 1) : (_halfWidth + _textLength);
		cout << '[' << setfill('=') << setw(_startTab) << text << setw(_halfWidth) << ']' << endl;
	}

	// Print STL string at center of console
	void PrintTextAtCenter(std::string& text) noexcept {
		PrintTextAtCenter(text.c_str());
	}

}
