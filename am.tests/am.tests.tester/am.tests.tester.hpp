#ifndef AM_TESTS_TESTER_H
#define AM_TESTS_TESTER_H

#include <ctime>
#include <iostream>
#include "am.ipc.base-pipe.hpp"

namespace tests {
	using ipc::uint;

	// Tester class
	class Tester {
	private:
		uint _passed;
		uint _failed;
		clock_t _start;
		clock_t _end;

	public:
		// Constructors
		Tester() noexcept;
		Tester(uint, uint) noexcept;

		// Copying constructor
		Tester(const Tester&) noexcept;

		// Copying operator "="
		const Tester& operator=(const Tester&) noexcept;

		// Destructor
		~Tester() noexcept;

		// Returns the number of passed tests
		uint GetPassedNum() noexcept;

		// Returns the number of failed tests
		uint GetFailedNum() noexcept;

		// Returns total tests number
		uint GetTotalNum() noexcept;
		
		// Template method for testing functions
		template <class Type> void Test(const Type&, const Type&&, const char*) noexcept;

	};

	// Template method for testing functions
	template<class Type>
	inline void Tester::Test(const Type& reality, const Type&& expect, const char* testName) noexcept
	{
		std::cout << "Test \"" << testName << "\" status: ";
		if (reality == expect) {
			_passed++;
			std::cout << "passed.\n";
		}
		else {
			_failed++;
			std::cout << "failed!\n";
		}
	}

	// Benchmark test with assertation
	void BenchmarkTest(Tester&) noexcept;

}

#endif // AM_TESTS_TESTER_H
