#include "MainForm.h"

namespace am_ui {
	;
	/* ---  --- */
	// t2
	void ClientPipeFunc(const TCHAR* pipeName, ipc::ControlMessage msg);
	/* ---  --- */


	// Constructor
	MainForm::MainForm(void) {
		InitializeComponent();

		using System::Collections::Generic::List;
		using core::ActionItem;
		List<ActionItem^>^ actions = gcnew List<ActionItem^>();
		actions->Add(gcnew ActionItem(ipc::ControlMessage::Start, "Start Service"));
		actions->Add(gcnew ActionItem(ipc::ControlMessage::Stop, "Stop Service"));
		actions->Add(gcnew ActionItem(ipc::ControlMessage::Shutdown, "Shutdown Service"));

		cbChooseAction->DisplayMember = "ActionName";
		cbChooseAction->ValueMember = "ActionType";
		cbChooseAction->DataSource = actions;
		cbChooseAction->SelectedIndex = 0;

		using namespace ipc;
		trace::LogTracer tracer("E:\\Test.txt");
	}

	// Destructor
	MainForm::~MainForm() {
		if (components) delete components;
	}

	// t1 action
	void MainForm::actionBtn_Click(System::Object^ sender, System::EventArgs^ e) {
		using ipc::ClientPipe;
		using ipc::ControlMessage;

		ControlMessage action = safe_cast<core::ActionItem^>(cbChooseAction->SelectedItem)->ActionType;
		switch (action) {
		case ControlMessage::Start:
			lblText->Text = "Start";
			try {
				ClientPipeFunc(TEXT("UIPipe"), action);
			}
			catch (...) {
				system("am.ams.exe --run");
			}
			break;
		case ControlMessage::Stop:
			lblText->Text = "Stop";
			try {
				ClientPipeFunc(TEXT("UIPipe"), action);
			}
			catch (std::runtime_error& ex) {
				String^ str = gcnew String(ex.what());
				MessageBox::Show(this, str, "Error",
					MessageBoxButtons::OK, MessageBoxIcon::Information, MessageBoxDefaultButton::Button1);
			}
			break;
		case ControlMessage::Shutdown:
			lblText->Text = "Shutdown";
			try {
				ClientPipeFunc(TEXT("UIPipe"), action);
			}
			catch (std::runtime_error& ex) {
				String^ str = gcnew String(ex.what());
				MessageBox::Show(this, str, "Error",
					MessageBoxButtons::OK, MessageBoxIcon::Information, MessageBoxDefaultButton::Button1);
			}
			break;
		}
		





	}

	// t2
	void ClientPipeFunc(const TCHAR* pipeName, ipc::ControlMessage msg) {
		ipc::ClientPipe client(pipeName, trace::LogTracer());
		ipc::MessageHolder buffer;
		buffer.Pack(msg);
		client.SendMsg(buffer);
		auto clientStat = auth::AuthClient(client);

		if (clientStat == ipc::AuthStat::Connected) {
			MessageBox::Show("Success connecting", "All is Ok",
				MessageBoxButtons::OK, MessageBoxIcon::Information, MessageBoxDefaultButton::Button1);
		}
		else {
			MessageBox::Show("Failed connecting", "Bad AuthStatus",
				MessageBoxButtons::OK, MessageBoxIcon::Information, MessageBoxDefaultButton::Button1);
		}
	}






}
