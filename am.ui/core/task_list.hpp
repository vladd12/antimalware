#ifndef AM_TASK_LIST_H
#define AM_TASK_LIST_H

#include <cstdint>
#include "basic_structures.hpp"

namespace am_ui {
	using namespace System::Windows::Forms;
	using System::Collections::Generic::List;
	using System::Drawing::Point;
	using System::Convert;
	using System::String;

	// Class for work with UI on input form
	public ref class TaskList {
	private:
		// Bundle type definition
		typedef System::Tuple<TextBox^, ComboBox^, Button^, Button^> Bundle;

		Control::ControlCollection^ control;
		List<Bundle^>^ tList;
		Point startPoint;
		int64_t number;

		// Creating text box in bundle for list of bundles
		TextBox^ CreateInputTxtBox();

		// Creating combo box in bundle for list of bundles
		ComboBox^ CreateSelectCmbBox();

		// Creating button for openning path in bundle for list of bundles
		Button^ CreateOpenBtn();

		// Creating button for deleting current bundle from list of bundles
		Button^ CreateDeleteBtn();

		// Event "button clicked" for every delete button in list
		void deleteBtn_Click(System::Object^ sender, System::EventArgs^ e);

		// Event "button clicked" for every delete button in list
		void openBtn_Click(System::Object^ sender, System::EventArgs^ e);

		// Check is current bundle only one empty
		bool IsOnlyCurEmpty(int tabIndex);

		// Update locations and indexes of all elements after deleting bundle
		void UpdateAll(int index);

	public:
		// Constructor
		TaskList(Form^ form);

		// Add in list tuple of elements
		void Add();

		// Remove bundle from list
		void Remove(int index);

		// Return string with paths for task container
		String^ GetTasks();

	};

}

#endif // AM_TASK_LIST_H
