#include "task_list.hpp"

namespace am_ui {
	// Task list constructor
	TaskList::TaskList(Form^ form) {
		using namespace core;
		control = form->Controls;
		tList = gcnew List<Bundle^>();
		startPoint = Point(10, 50);
		number = 0;
	}

	// Add in list tuple of elements
	void TaskList::Add() {
		tList->Add(gcnew Bundle(
			CreateInputTxtBox(), CreateSelectCmbBox(),
			CreateOpenBtn(), CreateDeleteBtn()));
		number++;
		startPoint = Point(startPoint.X, startPoint.Y + 38);
	}

	// Creating text box in bundle for list of bundles
	TextBox^ TaskList::CreateInputTxtBox() {
		auto inTxtBox = gcnew TextBox();
		inTxtBox->Name = L"txtBoxInputPath";
		inTxtBox->Font = gcnew System::Drawing::Font(L"Times New Roman", 12,
			System::Drawing::FontStyle::Regular,
			System::Drawing::GraphicsUnit::Point,
			static_cast<System::Byte>(204));
		inTxtBox->Location = startPoint;
		inTxtBox->Size = System::Drawing::Size(308, 30);
		inTxtBox->TabIndex = 4 * static_cast<int>(number) + 0;
		inTxtBox->ReadOnly = true;
		control->Add(inTxtBox);
		return inTxtBox;
	}

	// Creating combo box in bundle for list of bundles
	ComboBox^ TaskList::CreateSelectCmbBox() {
		using namespace core;
		auto selectCmbBox = gcnew ComboBox();
		selectCmbBox->Name = L"SelectCmbBox";
		selectCmbBox->DropDownStyle = ComboBoxStyle::DropDownList;
		selectCmbBox->Font = gcnew System::Drawing::Font(L"Times New Roman", 10.8F,
			System::Drawing::FontStyle::Regular,
			System::Drawing::GraphicsUnit::Point,
			static_cast<System::Byte>(204));
		selectCmbBox->FormattingEnabled = true;
		selectCmbBox->Location = Point(startPoint.X + 312, startPoint.Y);
		selectCmbBox->Size = System::Drawing::Size(116, 30);
		selectCmbBox->TabIndex = 4 * static_cast<int>(number) + 1;
		auto openActions = gcnew List<OpenActionItem^>();
		openActions->Add(gcnew OpenActionItem(OpenType::File, "Выбрать файл"));
		openActions->Add(gcnew OpenActionItem(OpenType::Directory, "Выбрать папку"));
		selectCmbBox->DisplayMember = "ActionName";
		selectCmbBox->ValueMember = "ActionType";
		selectCmbBox->DataSource = openActions;
		selectCmbBox->SelectedItem = openActions[0];
		control->Add(selectCmbBox);
		return selectCmbBox;
	}

	// Creating button for openning path in bundle for list of bundles
	Button^ TaskList::CreateOpenBtn() {
		auto openBtn = gcnew Button();
		openBtn->Name = L"btnOpenPath";
		openBtn->Font = gcnew System::Drawing::Font(L"Times New Roman", 12,
			System::Drawing::FontStyle::Regular,
			System::Drawing::GraphicsUnit::Point,
			static_cast<System::Byte>(204));
		openBtn->Location = Point(startPoint.X + 431, startPoint.Y - 1);
		openBtn->Size = System::Drawing::Size(26, 27);
		openBtn->TabIndex = 4 * static_cast<int>(number) + 2;
		openBtn->Text = L"⋯";
		openBtn->UseVisualStyleBackColor = true;
		openBtn->Click += gcnew System::EventHandler(this, &TaskList::openBtn_Click);
		control->Add(openBtn);
		return openBtn;
	}

	// Creating button for deleting current bundle from list of bundles
	Button^ TaskList::CreateDeleteBtn() {
		auto deleteBtn = gcnew System::Windows::Forms::Button();
		deleteBtn->Name = L"btnDeletePath";
		deleteBtn->Font = gcnew System::Drawing::Font(L"Times New Roman", 12,
			System::Drawing::FontStyle::Regular,
			System::Drawing::GraphicsUnit::Point,
			static_cast<System::Byte>(204));
		deleteBtn->Location = Point(startPoint.X + 461, startPoint.Y - 1);
		deleteBtn->Size = System::Drawing::Size(26, 27);
		deleteBtn->TabIndex = 4 * static_cast<int>(number) + 3;
		deleteBtn->Text = L"✕";
		deleteBtn->UseVisualStyleBackColor = true;
		deleteBtn->Click += gcnew System::EventHandler(this, &TaskList::deleteBtn_Click);
		control->Add(deleteBtn);
		return deleteBtn;
	}

	// Event "button clicked" for every delete button in list
	void TaskList::deleteBtn_Click(System::Object^ sender, System::EventArgs^ e) {
		auto who = safe_cast<Button^>(sender);
		auto index = (who->TabIndex - 3) / 4;
		this->Remove(index);
	}

	// Event "button clicked" for every delete button in list
	void TaskList::openBtn_Click(System::Object^ sender, System::EventArgs^ e) {
		using namespace core;
		auto who = safe_cast<Button^>(sender);
		auto index = (who->TabIndex - 2) / 4;
		auto curCmbBox = tList[index]->Item2;
		auto openAction = safe_cast<OpenActionItem^>(curCmbBox->SelectedItem)->ActionType;
		if (openAction == OpenType::File) {
			auto OpenFileDlg = gcnew OpenFileDialog;
			OpenFileDlg->Filter = "All files(*.*)|*.*";
			OpenFileDlg->InitialDirectory = "C:\\";
			if (OpenFileDlg->ShowDialog() == DialogResult::OK) {
				auto fileName = OpenFileDlg->FileName;
				tList[index]->Item1->Text = fileName;
				if (this->IsOnlyCurEmpty(index)) this->Add();
			}
		}
		else {
			auto OpenDirDlg = gcnew FolderBrowserDialog();
			if (OpenDirDlg->ShowDialog() == DialogResult::OK) {
				auto dirName = OpenDirDlg->SelectedPath;
				tList[index]->Item1->Text = dirName;
				if (this->IsOnlyCurEmpty(index)) this->Add();
			}
		}
	}

	// Check is current bundle only one empty
	bool TaskList::IsOnlyCurEmpty(int index) {
		bool flag = true;
		for (int i = 0; i < tList->Count; i++) {
			if (i != index) {
				if (tList[i]->Item1->Text == L"") {
					flag = false;
					break;
				}
			}
		}
		return flag;
	}

	// Remove bundle from list
	void TaskList::Remove(int index) {
		control->Remove(tList[index]->Item1);
		tList[index]->Item1->~TextBox();
		control->Remove(tList[index]->Item2);
		tList[index]->Item2->~ComboBox();
		control->Remove(tList[index]->Item3);
		tList[index]->Item3->~Button();
		control->Remove(tList[index]->Item4);
		tList[index]->Item4->~Button();
		UpdateAll(index);
		startPoint = Point(startPoint.X, startPoint.Y - 38);
		tList->RemoveAt(index);
		number--;
		if (tList->Count == 0) {
			this->Add();
		}
	}

	// Update locations and indexes of all elements after deleting bundle
	void TaskList::UpdateAll(int index) {
		for (auto i = index + 1; i < tList->Count; i++) {
			tList[i]->Item1->Location = Point(tList[i]->Item1->Location.X, tList[i]->Item1->Location.Y - 38);
			tList[i]->Item1->TabIndex = (i - 1) * 4 + 0;
			tList[i]->Item2->Location = Point(tList[i]->Item2->Location.X, tList[i]->Item2->Location.Y - 38);
			tList[i]->Item2->TabIndex = (i - 1) * 4 + 1;
			tList[i]->Item3->Location = Point(tList[i]->Item3->Location.X, tList[i]->Item3->Location.Y - 38);
			tList[i]->Item3->TabIndex = (i - 1) * 4 + 2;
			tList[i]->Item4->Location = Point(tList[i]->Item4->Location.X, tList[i]->Item4->Location.Y - 38);
			tList[i]->Item4->TabIndex = (i - 1) * 4 + 3;
		}
	}

	// Return string with paths for task container
	String^ TaskList::GetTasks() {
		String^ result = L"";
		for each (auto bundle in tList) {
			result += bundle->Item1->Text + L';';
		}
		return result;
	}

}
