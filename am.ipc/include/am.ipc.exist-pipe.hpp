#ifndef AM_IPC_EXIST_PIPE_H
#define AM_IPC_EXIST_PIPE_H

#include "am.ipc.base-pipe.hpp"

namespace ipc {

	class IPC_LIB_API ExistPipe: public BasePipe {
	private:
		// Restriction copying of pipes
		ExistPipe(const ExistPipe&) noexcept { }

		// Restriction copying of pipes
		void operator=(const ExistPipe&) noexcept { }

		// Open existing pipe events and check errors
		void OpenEv(HANDLE&, const tchar* const) noexcept(false);

	public:
		explicit ExistPipe(const tchar* const) noexcept(false);

		// Send message (request) from another proccess/instance of pipe
		void SendMsg(DWORD) noexcept(false) override;

		// Read message from pipe by another proccess/instance of pipe
		DWORD GetMsg() noexcept(false);
	};

	// Fabric for Existing Pipes
	IPC_LIB_API std::shared_ptr<ExistPipe> CreateExistPipe(const tchar* const) noexcept;

}

#endif // AM_IPC_EXIST_PIPE_H
