#ifndef AM_IPC_BASE_PIPE_H
#define AM_IPC_BASE_PIPE_H

#include <exception>
#include <stdexcept>
#include <memory>
#include <Windows.h>
#include <tchar.h>

// Import/export members of class in/from DLL library
#ifdef AM_IPC_PIPE_EXPORTS
#define IPC_LIB_API __declspec(dllexport)
#else
#define IPC_LIB_API __declspec(dllimport)
#endif

namespace ipc {
	// Types definition
	typedef TCHAR tchar, _tchar;
	typedef unsigned int uint, _uint;

	// Base Abstract Class for Pipes
	class IPC_LIB_API BasePipe {
	protected:
		HANDLE _hPipe;
		HANDLE _evRequest;
		HANDLE _evResponse;
		uint _bufSize;
		
		// Converts received from constructor name
		// to pipe API name and event pipe name
		void ConvertNames(tchar*, tchar*, tchar*, const uint, const tchar* const) noexcept;

		// Send message to pipe core function that use
		// override SendMsg functions in derived classes
		void SendMsgBase(DWORD&) noexcept(false);

	public:
		BasePipe() noexcept;
		~BasePipe() noexcept(false);

		// Send message to pipe abstract function
		virtual void SendMsg(DWORD) noexcept(false) = 0;

		// Return bool value if pipe (owner or 
		// another proccess) have incoming message
		virtual bool IsIncomingMsg() noexcept(false) = 0;

		// Pipe wait until get msg from another
		// proccess/instance of pipe
		virtual void WaitIncomingMsg() noexcept(false) = 0;
	};

}

#endif // AM_IPC_BASE_PIPE_H
