#ifndef AM_IPC_BASE_PIPE_H
#define AM_IPC_BASE_PIPE_H

#include <exception>
#include <memory>
#include <stdexcept>
#include "am.trace.log-tracer.hpp"
#include "am.ipc.wrapper.hpp"

namespace ipc {
	// Types definition
	typedef TCHAR tchar, _tchar;
	typedef unsigned int uint, _uint;
	using trace::LogTracer;
	using trace::TraceLevel;

	// Base Abstract Class for Pipes
	class IPC_LIB_API BasePipe {
	private:
		// Restriction copying of pipes
		explicit BasePipe() noexcept = delete;
		explicit BasePipe(const BasePipe& rhs) noexcept = delete;
		void operator=(const BasePipe& rhs) noexcept = delete;

	protected:
		HANDLE _hPipe;
		HANDLE _evRequest;
		HANDLE _evResponse;
		uint _bufSize;
		LogTracer&	_tracer;
		
		// Converts received from constructor name
		// to pipe API name and event pipe name
		void ConvertNames(tchar* pNameDest, tchar* eReqNameDest, tchar* eRespNameDest,
			const uint nameSize, const tchar* const nameSrc) noexcept;

		// Send message to pipe core function that use
		// override SendMsg functions in derived classes
		template<class Type>
		void SendMsgBase(Type& msg) noexcept(false);
		// void SendMsgBase(DWORD& msg) noexcept(false);

		// 
		template<class Type>
		void ReadMsgBase(Type& msg) noexcept(false);

	public:
		explicit BasePipe(LogTracer& tracer, const uint bufSize = 1024) noexcept;
		virtual ~BasePipe() noexcept(false);

		// Send message to pipe abstract function
		template<class Type>
		void SendMsg(Type msg) noexcept(false) = 0;
		//virtual void SendMsg(DWORD msg) noexcept(false) = 0;

		// Get message from pipe abstract function
		template<class Type>
		Type GetMsg() noexcept(false) = 0;
		//virtual DWORD GetMsg() noexcept(false) = 0;

		// Return bool value if pipe (owner process or 
		// another process) have incoming message
		virtual bool IsIncomingMsg() noexcept(false) = 0;

		// ttt
		virtual void ActivatePipe() noexcept = 0;

		// Pipe wait until get msg from
		// owner process/another process
		virtual void WaitIncomingMsg() noexcept(false) = 0;
	};

	// Send message to pipe core function that use
	// override SendMsg functions in derived classes
	template<class Type>
	inline void BasePipe::SendMsgBase(Type& msg) noexcept(false) {
		// DebugInfo
		std::string strA(typeid(Type).name());
		_tracer.Trace(TraceLevel::Info) << std::wstring(strA.begin(), strA.end()).c_str() << TEXT('\n');

		Wrapper msgWrap(msg);
		DWORD cbReplyBytes = sizeof(msgWrap), cbWritten;
		BOOL fSuccess = WriteFile(_hPipe, &msgWrap, cbReplyBytes, &cbWritten, NULL);
		if (!fSuccess || cbReplyBytes != cbWritten) {
			_tracer.Trace(TraceLevel::Error) << TEXT("Failed writing data to pipe: ")
				<< GetLastError() << TEXT('\n');
			throw std::runtime_error("Failed write data to pipe");
		}
	}

}

#endif // AM_IPC_BASE_PIPE_H
