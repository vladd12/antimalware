#ifndef AM_IPC_BASE_PIPE_H
#define AM_IPC_BASE_PIPE_H

#include <exception>
#include <memory>
#include <stdexcept>
#include "am.trace.log-tracer.hpp"
#include "am.ipc.message.hpp"

namespace ipc {
	// Types definition
	typedef TCHAR tchar, _tchar;
	typedef unsigned int uint, _uint;

	// Base Abstract Class for Pipes
	class IPC_LIB_API BasePipe {
	private:
		// Restriction copying of pipes
		explicit BasePipe() noexcept = delete;
		explicit BasePipe(const BasePipe& rhs) noexcept = delete;
		void operator=(const BasePipe& rhs) noexcept = delete;

	protected:
		HANDLE _hPipe;
		HANDLE _evRequest;
		HANDLE _evResponse;
		
		// Converts received from constructor name
		// to pipe API name and event pipe name
		void ConvertNames(tchar* pNameDest, tchar* eReqNameDest, tchar* eRespNameDest,
			const uint nameSize, const tchar* const nameSrc) noexcept;

		// Send message to pipe core function that use
		// override SendMsg functions in derived classes
		void SendMsgBase(MessageHolder& msg) noexcept(false);

		// Read message from pipe core function that used by
		// override ReadMsg functions in derived classes
		MessageHolder ReadMsgBase() noexcept(false);

	public:
		trace::LogTracer& _tracer;

		// Constructor
		explicit BasePipe(trace::LogTracer& tracer) noexcept;

		// Destructor
		virtual ~BasePipe() noexcept(false);

		// Send message abstract method
		virtual void SendMsg(MessageHolder& msg) noexcept(false) = 0;

		// Read message abstract method
		virtual MessageHolder ReadMsg() noexcept(false) = 0;

		// Return bool value if pipe (owner process or 
		// another process) have incoming message
		virtual bool IsIncomingMsg() noexcept(false) = 0;
		
		// Pipe wait until get msg from
		// owner process/another process
		virtual void WaitIncomingMsg() noexcept(false) = 0;
	};

}

#endif // AM_IPC_BASE_PIPE_H
