#ifndef AM_IPC_BASE_PIPE_H
#define AM_IPC_BASE_PIPE_H

#include <exception>
#include <memory>
#include <stdexcept>
#include "am.trace.log-tracer.hpp"

namespace ipc {
	// Types definition
	typedef TCHAR tchar, _tchar;
	typedef unsigned int uint, _uint;
	using trace::LogTracer;
	using trace::TraceLevel;

	// Base Abstract Class for Pipes
	class IPC_LIB_API BasePipe {
	private:
		// Restriction copying of pipes
		explicit BasePipe() noexcept;
		explicit BasePipe(const BasePipe&) noexcept;
		void operator=(const BasePipe&) noexcept { }

	protected:
		HANDLE _hPipe;
		HANDLE _evRequest;
		HANDLE _evResponse;
		uint _bufSize;
		LogTracer&	_tracer;
		
		// Converts received from constructor name
		// to pipe API name and event pipe name
		void ConvertNames(tchar*, tchar*, tchar*, const uint, const tchar* const) noexcept;

		// Send message to pipe core function that use
		// override SendMsg functions in derived classes
		void SendMsgBase(DWORD&) noexcept(false);

	public:
		explicit BasePipe(LogTracer&, const uint = 1024) noexcept;
		~BasePipe() noexcept(false);

		// Send message to pipe abstract function
		virtual void SendMsg(DWORD) noexcept(false) = 0;

		// Return bool value if pipe (owner process or 
		// another process) have incoming message
		virtual bool IsIncomingMsg() noexcept(false) = 0;

		// Pipe wait until get msg from
		// owner process/another process
		virtual void WaitIncomingMsg() noexcept(false) = 0;
	};

}

#endif // AM_IPC_BASE_PIPE_H
