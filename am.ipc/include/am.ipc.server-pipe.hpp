#ifndef AM_IPC_NEW_PIPE_H
#define AM_IPC_NEW_PIPE_H

#include "am.ipc.base-pipe.hpp"

namespace ipc {
	// Server Pipe class
	class IPC_LIB_API ServerPipe: public BasePipe {
	private:
		bool isConnect;

		// Create event private function
		bool CreateEv(HANDLE& evHandle, const tchar* const evName) noexcept;

		// Wait connection from client pipe instance
		static void WaitConnections(ServerPipe* pipe) noexcept;

	public:
		// Constructor with params
		explicit ServerPipe(const tchar* const pipeName,
			trace::LogTracer& tracer) noexcept(false);

		// Restriction copying of pipes
		explicit ServerPipe() noexcept = delete;
		explicit ServerPipe(const ServerPipe& rhs) noexcept = delete;
		void operator=(const ServerPipe& rhs) noexcept = delete;

		// Destructor
		~ServerPipe() noexcept;

		// Close connection with client
		bool Disconnect() noexcept;

		// Check valid connection
		bool IsValidConnection() noexcept;

		// Send message (response) from server pipe to client pipe
		virtual bool SendMsg(MessageHolder& msg) noexcept override;

		// Read message (request) from client
		virtual MessageHolder ReadMsg() noexcept override;

		// Is are incoming message for server pipe?
		virtual bool IsIncomingMsg() noexcept(false) override;

		// Server pipe waits until a message is sent to him
		virtual void WaitIncomingMsg() noexcept(false) override;

	};

	// Fabric for Server Pipes
	IPC_LIB_API std::shared_ptr<ServerPipe> CreateServerPipe(
		const tchar* const pipeName, trace::LogTracer& tracer) noexcept;

}

#endif // AM_IPC_NEW_PIPE_H
