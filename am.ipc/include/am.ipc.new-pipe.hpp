#ifndef AM_IPC_NEW_PIPE_H
#define AM_IPC_NEW_PIPE_H

#include "am.ipc.base-pipe.hpp"

namespace ipc {
	// Class of Pipe, creating by owner proccess
	class IPC_LIB_API NewPipe: public BasePipe {
	private:
		bool _listenFlag;

		// Restriction copying of pipes
		explicit NewPipe() noexcept { }
		explicit NewPipe(const NewPipe&) noexcept { }
		void operator=(const NewPipe&) noexcept { }

		// Function for a detached thread listening to connections
		static void WaitConnection(NewPipe*) noexcept;

		// Create event private function
		void CreateEv(HANDLE&, const tchar* const) noexcept(false);

	public:
		// Constructor
		explicit NewPipe(const tchar* const, const uint) noexcept(false);

		// Destructor
		~NewPipe() noexcept(false);

		// Pipe is listen requests for read/write
		void ListenCons() noexcept;

		// Pipe stop listening requests for read/write (except the last one)
		void StopListenCons() noexcept;

		// Send message (response) from owner pipe class
		void SendMsg(DWORD) noexcept(false) override;

		// Read message (request) from pipe by owner
		DWORD GetMsg() noexcept(false);
	};

	// Fabric for New Pipes
	IPC_LIB_API std::shared_ptr<NewPipe> CreateNewPipe(const tchar* const, const uint) noexcept;

}

#endif // AM_IPC_NEW_PIPE_H
