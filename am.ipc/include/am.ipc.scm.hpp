#ifndef AM_IPC_SERVICE_CONNECTION_MANAGER_H
#define AM_IPC_SERVICE_CONNECTION_MANAGER_H

#include <string>
#include <vector>
#include <tchar.h>
#include <Windows.h>
#include "am.trace.log-tracer.hpp"
#include "am.auth.protocol.hpp"

namespace ipc {
	typedef TCHAR tchar;

	// ttt
	template <class T>
	class IConnectionManager {
	protected:
		T listener;
		trace::LogTracer& tracer;
		std::vector<T> connections;

	public:
		// Delete default constructor
		explicit IConnectionManager() noexcept = delete;

		// Constructor with ASCII string
		IConnectionManager(
		  const std::string& pipeName,
		  trace::LogTracer& tracer
		) noexcept: listener(pipeName.c_str(), tracer) { }

		// Constructor with Unicode string
		IConnectionManager(
		  const std::wstring& pipeName,
		  trace::LogTracer& tracer
		) noexcept: listener(pipeName.c_str(), tracer) { }

		// Return connection
		virtual T GetConnection(void) const noexcept = 0;

		// Auth protocol for current connection type
		virtual void Auth(void) noexcept = 0;

	};

	// ttt2
	class ServerConnectionManager : public IConnectionManager<ServerPipe> {
	public:
		// Delete default constructor
		explicit ServerConnectionManager() noexcept = delete;

		// Constructor with ASCII string
		ServerConnectionManager(
			const std::string& pipeName,
			trace::LogTracer& tracer
		) noexcept: IConnectionManager<ServerPipe>(pipeName, tracer) { }

		// Constructor with Unicode string
		ServerConnectionManager(
			const std::wstring& pipeName,
			trace::LogTracer& tracer
		) noexcept: IConnectionManager<ServerPipe>(pipeName, tracer) { }

		// 
		virtual ServerPipe GetConnection() const noexcept;

		// 
		virtual void Auth() noexcept;

	};

	/*
	// ttt3
	class ClientConnectionManager : public IConnectionManager<ClientPipe> {
	public:
		// Delete default constructor
		explicit ClientConnectionManager() noexcept = delete;

		// Constructor with ASCII string
		ClientConnectionManager(
			const std::string& pipeName,
			trace::LogTracer& tracer
		) noexcept: IConnectionManager<ClientPipe>(pipeName, tracer) { }

		// Constructor with Unicode string
		ClientConnectionManager(
			const std::wstring& pipeName,
			trace::LogTracer& tracer
		) noexcept: IConnectionManager<ClientPipe>(pipeName, tracer) { }

		// 
		virtual ClientPipe GetConnection() const noexcept;

		// 
		virtual void Auth() noexcept;

	};
	*/

}

#endif // AM_IPC_SERVICE_CONNECTION_MANAGER_H
