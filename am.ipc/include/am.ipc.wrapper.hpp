#ifndef AM_IPC_WRAPPER_H
#define AM_IPC_WRAPPER_H

#include <cassert>
#include <memory>
#include <stdexcept>
#include <typeinfo>

namespace ipc {
	// Test Wrapper class (useless)
	class TestWrapper {
	public:
		// Base Holder class
		struct BaseHolder {
			// Virtual constructor
			virtual ~BaseHolder() noexcept = default;

			// Virtual destructor
			virtual const std::type_info& GetTypeInfo() const noexcept = 0;
		};

		// Holder class
		template <class Type>
		struct Holder : BaseHolder {
			// Stored object
			Type _any;

			// Constructor
			Holder(const Type& any) noexcept : _any(any) { }

			// Function for getting type info about stored object
			const std::type_info& GetTypeInfo() const noexcept {
				return typeid(Type);
			}
		};

		BaseHolder* _holder;

	public:
		// Constructor
		template <class Type>
		TestWrapper(const Type& container) noexcept :
			_holder(new Holder<Type>(container)) { }

		// Destructor
		~TestWrapper() {
			delete _holder;
		}

		// Cast stored data to original data type
		template<typename SavedType>
		SavedType Cast() const noexcept(false) {
			if (typeid(SavedType) == _holder->GetTypeInfo()) {
				Holder<SavedType>* holder = dynamic_cast<Holder<SavedType>*>(_holder);
				return holder->_any;
			}
			else throw std::runtime_error("Bad any cast");
		}

	};

	// Type Interface (useless)
	template <class _type>
	struct IType {
		typedef _type Type;
	};









}

#endif // AM_IPC_WRAPPER_H
