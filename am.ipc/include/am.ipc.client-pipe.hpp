#ifndef AM_IPC_EXIST_PIPE_H
#define AM_IPC_EXIST_PIPE_H

#include "am.ipc.base-pipe.hpp"

namespace ipc {

	class IPC_LIB_API ClientPipe: public BasePipe {
	private:
		// Restriction copying of pipes
		explicit ClientPipe() noexcept = delete;
		explicit ClientPipe(const ClientPipe& rhs) noexcept = delete;
		void operator=(const ClientPipe& rhs) noexcept = delete;

		// Open existing pipe events and check errors
		void OpenEv(HANDLE& evHandle, const tchar* const evName) noexcept(false);

	public:
		// Constructor
		explicit ClientPipe(const tchar* const pipeName, LogTracer& tracer) noexcept(false);

		// Send message (request) from another process/instance of pipe
		void SendMsg(DWORD msg) noexcept(false) override;

		// Read message from pipe by another process/instance of pipe
		DWORD GetMsg() noexcept(false) override;

		// Is are incoming message for another process/instance of pipe?
		virtual bool IsIncomingMsg() noexcept(false) override;

		// Another process/instance of pipe waits until a message is sent to him
		virtual void WaitIncomingMsg() noexcept(false) override;
	};

	// Fabric for Existing Pipes
	IPC_LIB_API std::shared_ptr<ClientPipe> CreateClientPipe(const tchar* const pipeName,
		LogTracer& tracer) noexcept;

}

#endif // AM_IPC_EXIST_PIPE_H
