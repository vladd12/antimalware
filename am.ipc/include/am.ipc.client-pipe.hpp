#ifndef CLIENT_PIPE_H
#define CLIENT_PIPE_H

#include "am.ipc.base-pipe.hpp"

namespace ipc {
	#pragma warning(push)
	#pragma warning(disable: 4251)
	// Class for client pipe
	class IPC_LIB_API ClientPipe : public BasePipe {
	private:
		std::string pipeName;
	public:
		// Default constructor
		explicit ClientPipe() noexcept;

		// Constructor with params
		ClientPipe(const std::string& pipeName) noexcept(false);

		// Copying constructor
		ClientPipe(const ClientPipe& rhs) noexcept;

		// Overloading operator "="
		ClientPipe& operator=(const ClientPipe& rhs) noexcept;

		// Opening and connecting to existing pipe
		virtual bool CreatePipe(const std::string& pipeName) noexcept override;

		// Change to message-read mode
		bool SetPipeState() noexcept;

		// Close and open current pipe
		bool Reopen() noexcept;

	};
	#pragma warning(pop)

}

#endif // CLIENT_PIPE_H
