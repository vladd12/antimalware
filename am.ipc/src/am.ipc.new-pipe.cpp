#include "../include/am.ipc.new-pipe.hpp"

using namespace IPC;

// Constructor
NewPipe::NewPipe(const tchar* const pipeName, const uint bufSize) throw (std::runtime_error) {
	// Creation pipe
	_bufSize = bufSize;
	_hPipe = CreateNamedPipe(pipeName, PIPE_ACCESS_DUPLEX,
		PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE | PIPE_WAIT,
		PIPE_UNLIMITED_INSTANCES, bufSize, bufSize, 0, NULL);
	// If creation failed
	if (_hPipe == INVALID_HANDLE_VALUE) {
		std::runtime_error("Failed creation of pipe");
	}
}

// Destructor
NewPipe::~NewPipe() throw (std::runtime_error) {
	if (CloseHandle(_hPipe) != TRUE) {
		std::runtime_error("Failed closing handle of pipe");
	}
}

// t3
std::shared_ptr<NewPipe> CreateNewPipe(const tchar* const pipeName, const uint& bufSize) {
	return std::make_shared<NewPipe>(pipeName, bufSize);
}
