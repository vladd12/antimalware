#include "../include/am.ipc.ccm.hpp"

namespace ipc {
	// Init static fields
	//
	const std::string ConnectionManager<ClientPipe>::dListenerName = "ServerCM";

	// Default constructor
	ClientConnectionManager::ClientConnectionManager()
		noexcept : ConnectionManager() { }

	// Get connection
	ClientPipe ClientConnectionManager::GetConnection() noexcept {
		ClientPipe connection;
		if (listener.CreatePipe(dListenerName)) {
			if (listener.SetPipeState()) {
				if (Auth(listener) == AuthStat::Connected) {
					auto bufName = listener.Read();
					memcpy_s(&buffer, 80, &bufName.message, 80);
					connection.CreatePipe(buffer);
					connection.SetPipeState();
					listener.Send(MessageHolder(0));
				}
				listener.Close();
			}
			else listener.Close();
		}
		return connection;
	}

	// Auth protocol for client
	AuthStat ClientConnectionManager::Auth(ClientPipe& listener) noexcept {
		AuthStat connectStatus = AuthStat::Disconnected;
		auto response = listener.Read().Unpack<DWORD>();
		auto checksum = CRC16(reinterpret_cast<uint8_t*>(&response), sizeof(DWORD));
		MessageHolder buffer(checksum);
		if (listener.Send(buffer)) {
			buffer = listener.Read();
			connectStatus = buffer.Unpack<AuthStat>();
		}
		else connectStatus = AuthStat::Disconnected;
		return connectStatus;
	}

}
