#include "../include/am.ipc.base-pipe.hpp"

namespace ipc {
	// Constructor
	BasePipe::BasePipe(LogTracer& tracer, const uint bufSize) noexcept:
		_hPipe(INVALID_HANDLE_VALUE), _evRequest(NULL),
		_evResponse(NULL), _bufSize(bufSize), _tracer(tracer) { }

	// Destructor
	BasePipe::~BasePipe() noexcept(false) {
		if (!CloseHandle(_hPipe)) {
			_tracer.Trace(TraceLevel::Error) << TEXT("Failed closing pipe handle: ")
				<< GetLastError() << TEXT('\n');
			throw std::runtime_error("Failed closing pipe handle");
		}
	}

	// Send message to pipe core function that use
	// override SendMsg functions in derived classes
	/*
	void BasePipe::SendMsgBase(DWORD& msg) noexcept(false) {
		DWORD cbReplyBytes = sizeof(DWORD), cbWritten;
		BOOL fSuccess = WriteFile(_hPipe, &msg, cbReplyBytes, &cbWritten, NULL);
		if (!fSuccess || cbReplyBytes != cbWritten) {
			_tracer.Trace(TraceLevel::Error) << TEXT("Failed writing data to pipe: ")
				<< GetLastError() << TEXT('\n');
			throw std::runtime_error("Failed write data to pipe");
		}
	}
	*/

	// Converts received from constructor name
	// to pipe API name and event pipe name
	void BasePipe::ConvertNames(tchar* pNameDest, tchar* eReqNameDest,
		tchar* eRespNameDest, const uint nameSize, const tchar* const nameSrc) noexcept
	{
		pNameDest[0] = TEXT('\0');
		eReqNameDest[0] = TEXT('\0');
		eRespNameDest[0] = TEXT('\0');
		_tcscat_s(pNameDest, nameSize, TEXT("\\\\.\\pipe\\"));
		_tcscat_s(pNameDest, nameSize, nameSrc);
		_tcscat_s(eReqNameDest, nameSize, TEXT("Global\\evRequest"));
		_tcscat_s(eReqNameDest, nameSize, nameSrc);
		_tcscat_s(eRespNameDest, nameSize, TEXT("Global\\evResponse"));
		_tcscat_s(eRespNameDest, nameSize, nameSrc);
	}

}
