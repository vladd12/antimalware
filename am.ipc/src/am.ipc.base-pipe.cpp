#include "../include/am.ipc.base-pipe.hpp"

namespace ipc {
	// Default BasePipe constructor
	BasePipe::BasePipe() noexcept : hPipe(INVALID_HANDLE_VALUE), errCode(0) { }

	// Sending message
	bool BasePipe::Send(MessageHolder& msg) noexcept {
		DWORD cbReplyBytes = sizeof(MessageHolder), cbWritten = 0;
		auto fSuccess = WriteFile(hPipe, &msg, cbReplyBytes, &cbWritten, NULL);
		if (!fSuccess || cbReplyBytes != cbWritten) {
			errCode = GetLastError();
			return false;
		}
		else return true;
	}

	// Reading message
	MessageHolder BasePipe::Read() noexcept {
		MessageHolder msg;
		DWORD size = sizeof(msg), cbBytesRead = 0;
		auto fState = ReadFile(hPipe, &msg, size, &cbBytesRead, NULL);
		if (!fState || cbBytesRead != size) {
			errCode = GetLastError();
			msg.Clean();
		}
		return msg;
	}

	// Returns handle of pipe
	HANDLE BasePipe::GetHandle() noexcept {
		return hPipe;
	}

	// Closing pipe
	bool BasePipe::Close() noexcept {
		if (hPipe != INVALID_HANDLE_VALUE && hPipe != NULL) {
			return (CloseHandle(hPipe) ? true : false);
		}
		else return true;
	}

}

