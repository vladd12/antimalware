#include "../include/am.trace.log-tracer.hpp"

namespace trace {
	// Constructor that gets path file
	LogTracer::LogTracer(const char* const pathFile) noexcept:
		logFile(pathFile, std::ios::app) { }
	
	// Constructor that gets opened file
	LogTracer::LogTracer(const FileStream& file) noexcept:
		logFile(std::move(const_cast<FileStream&>(file))) { }

	// Copying constructor
	LogTracer::LogTracer(const LogTracer& rhs) noexcept:
		logFile(std::move(const_cast<FileStream&>(rhs.logFile))) { }

	// Copying operator "="
	void LogTracer::operator=(const LogTracer& rhs) noexcept { 
		logFile = std::move(const_cast<FileStream&>(rhs.logFile));
	}
	
	// Destructor
	LogTracer::~LogTracer() noexcept {
		logFile << TEXT("\n\n");
		logFile.close();
	}

	// Tracer returns a stream for the specified trace level
	FileStream& LogTracer::Trace(TraceLevel&& traceLvl) noexcept {
		switch (traceLvl) {
		case TraceLevel::Info:
			logFile << TEXT("[INFO]\t");
			break;
		case TraceLevel::Warning:
			logFile << TEXT("[WARN]\t");
			break;
		case TraceLevel::Error:
			logFile << TEXT("[ERROR]\t");
			break;
		}
		return logFile;
	}

}
