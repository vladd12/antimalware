#include <climits>
#include <random>
#include "../include/am.ipc.scm.hpp"

namespace ipc {
	// Function that calculates checksum via CRC16 algorithm
	DWORD CRC16(uint8_t* addr, unsigned int length) noexcept {
		const uint32_t offset = 0x00000010;
		const uint32_t nand = 0xffffffff;
		register uint32_t sum = 0;
		while (length > 1) {
			sum += *addr++;
			length -= sizeof(uint8_t);
		}
		if (length > 0) sum += *(uint8_t*)addr;
		while (sum >> offset) {
			sum = (sum & nand) + (sum >> offset);
		}
		return static_cast<DWORD>(~sum);
	}

	// Function gives random number in range [start, end]
	int GetRandNum(int start, int end) noexcept {
		// Entropy source
		std::random_device random_device;
		// Random number generator
		std::mt19937 generator(random_device());
		// Uniform distribution in range [start, end]
		std::uniform_int_distribution<> distribution(start, end);
		// Random number
		int x = distribution(generator);
		return x;
	}

	// Init static fields
	//
	const std::string ConnectionManager<ServerPipe>::dListenerName = "ServerCM";
	const std::string ServerConnectionManager::conName = "Connection";

	// Default constructor
	ServerConnectionManager::ServerConnectionManager()
		noexcept : ConnectionManager(), cNum(0) { }

	// Destructor
	ServerConnectionManager::~ServerConnectionManager() noexcept {
		listener.Close();
	}

	// Get connection
	ServerPipe ServerConnectionManager::GetConnection() noexcept {
		ServerPipe connection;
		if (listener.GetHandle() == INVALID_HANDLE_VALUE) {
			if (!listener.CreatePipe(dListenerName)) {
				/* Do anything if can't create pipe with deafault name*/
			}
		}

		if (listener.WaitConnection()) {
			if (Auth(listener) == AuthStat::Connected) {
				auto curConName = conName + std::to_string(cNum);
				MessageHolder buffer;
				memcpy_s(&buffer.message, msgSize, curConName.c_str(), curConName.length() + 1);
				connection.CreatePipe(curConName);
				listener.Send(buffer);
				buffer = listener.Read();
				cNum++;
			}
			listener.Disconnect();
		}
		else listener.Disconnect();
		return connection;
	}

	// Auth protocol for server
	AuthStat ServerConnectionManager::Auth(ServerPipe& listener) noexcept {
		AuthStat stat = AuthStat::Disconnected;
		// Generate random number
		auto someRandNum = static_cast<DWORD>(GetRandNum(INT_MIN, INT_MAX));
		MessageHolder buffer(someRandNum);
		// Gets checksum of random number
		auto checksum = CRC16(reinterpret_cast<uint8_t*>(&someRandNum), sizeof(someRandNum));
		// Sends random number to client 
		if (listener.Send(buffer)) {
			buffer = listener.Read();
			// Verify checksum from client and checksum of pipe owner proccess
			if (buffer.Unpack<DWORD>() == checksum) {
				stat = AuthStat::Connected;
				buffer.Pack(stat);
				listener.Send(buffer);
			}
			else stat = AuthStat::Disconnected;
		}
		else stat = AuthStat::Disconnected;
		return stat;
	}

}
