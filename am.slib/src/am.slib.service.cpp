#include "../include/am.slib.service.hpp"
#include <winsvc.h>

namespace slib {
	void WINAPI ControlHandler(DWORD request);

	// Constructor
	Service::Service(Tracer& _tracer, const std::wstring& _serviceName):
		tracer(_tracer), serviceName(_serviceName), serviceStatus { 0 },
		serviceStatusHandle { 0 }
	{
		serviceStatus.dwServiceType = SERVICE_WIN32_OWN_PROCESS;
		serviceStatus.dwCurrentState = SERVICE_START_PENDING;
		serviceStatus.dwControlsAccepted = SERVICE_ACCEPT_STOP | SERVICE_ACCEPT_SHUTDOWN;
	}

	// Returns name of Service
	const std::wstring& Service::GetName() const {
		return serviceName;
	}

	// Starts the Service
	void Service::Start() throw (...) {
		// Register Service
		DWORD error;
		serviceStatus.dwCurrentState = SERVICE_START_PENDING;
		serviceStatusHandle = RegisterServiceCtrlHandlerW(serviceName.c_str(), (LPHANDLER_FUNCTION)ControlHandler);
		// If Register Failed
		if (serviceStatusHandle == (SERVICE_STATUS_HANDLE)0) {
			error = GetLastError();
			serviceStatus.dwCurrentState = SERVICE_STOPPED;
			serviceStatus.dwWin32ExitCode = error;
			NotifyState();
			tracer.Trace(TraceLevel::Error) << TEXT("Start service failed: error = ") << error;
			throw std::runtime_error("Register Service Failed");
		}

		// Init Service (abstract member)
		error = Init();
		// If Init Service Failed
		if (error) {
			serviceStatus.dwCurrentState = SERVICE_STOPPED;
			serviceStatus.dwWin32ExitCode = error;
			NotifyState();
			tracer.Trace(TraceLevel::Error) << TEXT("Init failed: error = ") << error;
			throw std::runtime_error("Init Service Failed");
		}

		// Start Service Work
		serviceStatus.dwCurrentState = SERVICE_RUNNING;
		NotifyState();
		while (serviceStatus.dwCurrentState == SERVICE_RUNNING) {
			DoWork();
		}
	}

	// Stops the Service
	void Service::Stop() {
		serviceStatus.dwCurrentState = SERVICE_STOP_PENDING;
		tracer.Trace(TraceLevel::Info) << TEXT("Stopping...");
		NotifyState();
		if (DoStop() == 0) {
			serviceStatus.dwWin32ExitCode = 0;
			serviceStatus.dwCurrentState = SERVICE_STOPPED;
			NotifyState();
			tracer.Trace(TraceLevel::Info) << TEXT("Stopped.");
		}
	}

	// Shutdown the Service
	void Service::Shutdown() {
		tracer.Trace(TraceLevel::Info) << TEXT("Shutting down...");
		if (DoStop() == 0) {
			serviceStatus.dwWin32ExitCode = 0;
			serviceStatus.dwCurrentState = SERVICE_STOPPED;
			NotifyState();
			tracer.Trace(TraceLevel::Info) << TEXT("Shutdown.");
		}
	}

	// Updates the Service Control Manager's status information for current Service
	void Service::NotifyState() {
		SetServiceStatus(serviceStatusHandle, &serviceStatus);
	}
}


