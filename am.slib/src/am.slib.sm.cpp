#include "../include/am.slib.sm.hpp"

namespace slib {
	// Constructor
	ServiceManager::ServiceManager(LogTracer& _tracer, const std::wstring& _serviceName, const std::wstring& _servicePath) noexcept:
	tracer(_tracer), serviceName(_serviceName), servicePath(_servicePath) { }
	
	// Installs Service via Service Control Manager
	void ServiceManager::InstallService() noexcept(false) {
		// Open Service Control Manager and check errors
		SC_HANDLE hSCManager = OpenSCManager(NULL, NULL, SC_MANAGER_CREATE_SERVICE);
		if (!hSCManager) {
			tracer.Trace(TraceLevel::Error) << TEXT("Error: Can't open Service Control Manager: ")
				<< GetLastError() << TEXT('\n');
			throw std::runtime_error("Can't open Service Control Manager");
		}

		// Create Service
		LPCWSTR _serviceName = serviceName.c_str();
		LPCWSTR _servicePath = servicePath.c_str();
		/*
		SC_HANDLE hService = CreateService(
			hSCManager, _serviceName, _servicePath, SERVICE_ALL_ACCESS, SERVICE_WIN32_OWN_PROCESS,
			SERVICE_DEMAND_START, SERVICE_ERROR_NORMAL, _servicePath, NULL, NULL, NULL, NULL, NULL);
		*/
		SC_HANDLE hService = CreateService(
			hSCManager, _serviceName, _servicePath, SERVICE_ALL_ACCESS & ~SERVICE_STOP, SERVICE_WIN32_OWN_PROCESS,
			SERVICE_AUTO_START, SERVICE_ERROR_NORMAL, _servicePath, NULL, NULL, NULL, NULL, NULL);
		// Check errors when created Service
		if (!hService) {
			tracer.Trace(TraceLevel::Error) << TEXT("Error: Can't create service: ")
				<< GetLastError() << TEXT('\n');
			CloseServiceHandle(hSCManager);
			throw std::runtime_error("Can't create service");
		}

		// Closing handles
		CloseServiceHandle(hService);
		CloseServiceHandle(hSCManager);
		tracer.Trace(TraceLevel::Info) << TEXT("Success install service.\n");
	}

	// Uninstalls Service via Service Control Manager
	void ServiceManager::UninstallService() noexcept(false) {
		// Open Service Control Manager and check errors
		SC_HANDLE hSCManager = OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);
		if (!hSCManager) {
			tracer.Trace(TraceLevel::Error) << TEXT("Error: Can't open Service Control Manager: ")
				<< GetLastError() << TEXT('\n');
			throw std::runtime_error("Can't open Service Control Manager");
		}

		// Remove Service and check errors
		SC_HANDLE hService = OpenService(hSCManager, serviceName.c_str(), SERVICE_STOP | DELETE);
		if (!hService) {
			tracer.Trace(TraceLevel::Error) << TEXT("Error: Can't remove service: ")
				<< GetLastError() << TEXT('\n');
			CloseServiceHandle(hSCManager);
			throw std::runtime_error("Can't Remove Service");
		}

		// Delete Service and closing handles
		DeleteService(hService);
		CloseServiceHandle(hService);
		CloseServiceHandle(hSCManager);
		tracer.Trace(TraceLevel::Info) << TEXT("Success remove service.\n");
	}

	// Runs Service via Service Control Manager
	void ServiceManager::RunService() noexcept(false) {
		// Open Service Control Manager and check errors
		SC_HANDLE hSCManager = OpenSCManager(NULL, NULL, SC_MANAGER_CREATE_SERVICE);
		if (!hSCManager) {
			tracer.Trace(TraceLevel::Error) << TEXT("Error: Can't open Service Control Manager: ")
				<< GetLastError() << TEXT('\n');
			throw std::runtime_error("Can't open Service Control Manager");
		}

		// Start Service and check errors
		SC_HANDLE hService = OpenService(hSCManager, serviceName.c_str(), SERVICE_START);
		if (!StartService(hService, 0, NULL)) {
			CloseServiceHandle(hSCManager);
			tracer.Trace(TraceLevel::Error) << TEXT("Error: Can't start service: ")
				<< GetLastError() << TEXT('\n');
			throw std::runtime_error("Can't start Service");
		}

		// Closing handles
		CloseServiceHandle(hService);
		CloseServiceHandle(hSCManager);
		tracer.Trace(TraceLevel::Info) << TEXT("Success start service.\n");
	}
	
}
