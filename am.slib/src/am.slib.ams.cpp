#include "../include/am.slib.ams.hpp"
#include "am.ipc.new-pipe.hpp"

namespace slib {
	// Constructor
	AntimalwareService::AntimalwareService(Tracer& tracer):
		Service(tracer, L"AntimalwareService") { }

	// Init Service return non-zero value in current implementation
	DWORD AntimalwareService::Init() {
		return DWORD(0);
	}

	// Main Service Function
	void AntimalwareService::DoWork() {
		using ipc::NewPipe;
		NewPipe UIPipe(TEXT("UIPipe"), 32);
		
	}

	// Stop Service return non-zero value in current implementation
	DWORD AntimalwareService::DoStop() {
		return DWORD(0);
	}

	// Constructor
	AntimalwareServiceFactory::AntimalwareServiceFactory(std::shared_ptr<Tracer>& _tracer):
		tracer(std::move(_tracer)) { }

	// Create AntimalwareService from Factory Class
	std::unique_ptr<Service> AntimalwareServiceFactory::Create() {
		return std::make_unique<AntimalwareService>(*tracer);
	}

}
