#ifndef AM_SLIB_TRACER_H
#define AM_SLIB_TRACER_H

#include <iostream>
#include <exception>
#include <string>
#include <sstream>
#include <stdexcept>
#include <Windows.h>
#include <tchar.h>

// Import/export members of class in/from DLL library
#ifdef AM_SLIB_EXPORTS
#define SLIB_LIB_API __declspec(dllexport)
#else
#define SLIB_LIB_API __declspec(dllimport)
#endif

namespace slib {
	// Enumeration for selecting output system
	enum OutputLevel {
		Console,
		Window
	};

	// Enumeration for message type which Tracer have got
	enum TraceLevel {
		Info,
		Warning,
		Error
	};

	// TracerW class
	class SLIB_LIB_API TracerW {
	private:
		std::wostream *info, *warn, *err;
		std::wostringstream *wnd;
		TraceLevel lastTrLvl;

	public:
		OutputLevel outLvl;

		// Constructor with selecting output system (console/windows)
		explicit TracerW(OutputLevel&&) noexcept;

		// Constructor with passing a referenceû to output streams 
		// (each stream is trace level)
		explicit TracerW(std::wostream&, std::wostream&, std::wostream&) noexcept;

		// Destructor
		~TracerW() noexcept;

		// Tracer returns a stream for the specified trace level
		std::wostream& Trace(TraceLevel&&) noexcept(false);

		// Show trace string in message box (special for Windos output model)
		void ShowTrace() noexcept(false);

	};

	// Unicode defines
	#ifdef UNICODE
	typedef TracerW Tracer;
	#else
	typedef TracerA Tracer;
	#endif
}

// DEBUG Tracer defines
#ifdef _DEBUG
#define show_trace() if (tracer.outLvl == OutputLevel::Window) tracer.ShowTrace()
#define show_ptrace() if (tracer->outLvl == OutputLevel::Window) tracer->ShowTrace()
#else
#define show_trace()
#define show_ptrace()
#endif

#endif // AM_SLIB_TRACER_H
