#ifndef AM_SLIB_SERVICE_H
#define AM_SLIB_SERVICE_H

#include "am.slib.tracer.hpp"
#include <string>
#include <memory>

namespace slib {
	#pragma warning(push)
	#pragma warning(disable: 4251)

	// Abstract Service Class
	class SLIB_LIB_API Service {
	private:
		Tracer&					tracer;
		std::wstring			serviceName;
		SERVICE_STATUS			serviceStatus;
		SERVICE_STATUS_HANDLE	serviceStatusHandle;

	public:
		// Constructor
		explicit Service(Tracer&, const std::wstring&) noexcept;

		// Returns name of Service
		const std::wstring& GetName() const noexcept;

		// Starts the Service
		void Start() noexcept(false);

		// Stops the Service
		void Stop() noexcept;

		// Shutdown the Service
		void Shutdown() noexcept;

		// Updates the Service Control Manager's status information for current Service
		void NotifyState() noexcept;

	protected:
		virtual DWORD Init() = 0;
		virtual void DoWork() = 0;
		virtual int DoStop() = 0;
	};
	#pragma warning(pop)

	// Abstract Factory Class 
	struct IServiceFactory {
		virtual std::unique_ptr<Service> Create() = 0;
	};

	// Smart Pointer to Service Instant
	std::unique_ptr<Service> pService = nullptr;

	// Entry Point for Service
	extern "C" SLIB_LIB_API void WINAPI ServiceMain(DWORD, wchar_t**) noexcept;

	// Service Control Handler
	extern "C" SLIB_LIB_API void WINAPI ControlHandler(DWORD) noexcept;

	// Creating Service Table Entry and Init Service
	SLIB_LIB_API void InitService(std::shared_ptr<Tracer>&, IServiceFactory&) noexcept(false);

}


#endif // AM_SLIB_SERVICE_H
