#ifndef AM_SLIB_SERVICE_H
#define AM_SLIB_SERVICE_H

#include "am.trace.log-tracer.hpp"
#include <exception>
#include <stdexcept>
#include <Windows.h>
#include <tchar.h>
#include <string>
#include <memory>

// Import/export members of class in/from DLL library
#ifdef AM_SLIB_EXPORTS
#define SLIB_LIB_API __declspec(dllexport)
#else
#define SLIB_LIB_API __declspec(dllimport)
#endif

namespace slib {
	using trace::LogTracer;
	using trace::TraceLevel;

	#pragma warning(push)
	#pragma warning(disable: 4251)
	// Abstract Service Class
	class SLIB_LIB_API Service {
	protected:
		LogTracer&				tracer;
		std::wstring			serviceName;
		SERVICE_STATUS			serviceStatus;
		SERVICE_STATUS_HANDLE	serviceStatusHandle;

	public:
		// Constructor
		explicit Service(LogTracer&, const std::wstring&) noexcept;

		// Returns name of Service
		const std::wstring& GetName() const noexcept;

		// Starts the Service
		void Start() noexcept(false);

		// Stops the Service
		void Stop() noexcept;

		// Shutdown the Service
		void Shutdown() noexcept;

		// Updates the Service Control Manager's status information for current Service
		void NotifyState() noexcept;

	protected:
		virtual DWORD Init() noexcept = 0;
		virtual void DoWork() noexcept = 0;
		virtual DWORD DoStop() noexcept = 0;
	};
	#pragma warning(pop)

	// Abstract Factory Class 
	struct IServiceFactory {
		virtual std::unique_ptr<Service> Create() = 0;
	};

	// Entry Point for Service
	extern "C" SLIB_LIB_API void WINAPI ServiceMain(DWORD, wchar_t**) noexcept;

	// Service Control Handler
	extern "C" SLIB_LIB_API void WINAPI ControlHandler(DWORD) noexcept;

	// Creating Service Table Entry and Init Service
	SLIB_LIB_API void InitService(std::shared_ptr<LogTracer>&, IServiceFactory&) noexcept(false);

}

#endif // AM_SLIB_SERVICE_H
