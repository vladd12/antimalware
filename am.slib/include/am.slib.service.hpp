#ifndef AM_SLIB_SERVICE_H
#define AM_SLIB_SERVICE_H

#include "am.slib.tracer.hpp"
#include <memory>

namespace slib {
	// Abstract Service Class
	class SLIB_LIB_API Service {
	private:
		Tracer&					tracer;
		std::wstring			serviceName;
		SERVICE_STATUS			serviceStatus;
		SERVICE_STATUS_HANDLE	serviceStatusHandle;

	public:
		// Constructor
		explicit Service(Tracer&, const std::wstring&) noexcept;

		// Returns name of Service
		const std::wstring& GetName() const noexcept;

		// Starts the Service
		void Start() throw (...);

		// Stops the Service
		void Stop() noexcept;

		// Shutdown the Service
		void Shutdown() noexcept;

		// Updates the Service Control Manager's status information for current Service
		void NotifyState() noexcept;

	protected:
		virtual DWORD Init() = 0;
		virtual void DoWork() = 0;
		virtual int DoStop() = 0;
	};

	// Abstract Factory Class 
	struct SLIB_LIB_API IServiceFactory
	{
		virtual std::unique_ptr<Service> Create() = 0;
	};
}


#endif // AM_SLIB_SERVICE_H
