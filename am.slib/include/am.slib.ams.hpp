#ifndef AM_SLIB_AMSERVICE_H
#define AM_SLIB_AMSERVICE_H

#include "am.slib.service.hpp"
#include <functional>

namespace slib {
	// Antimalware Service Class
	class SLIB_LIB_API AntimalwareService : public Service {
	public:
		// Constructor
		explicit AntimalwareService(Tracer&);

	protected:
		// Init Service return non-zero value in current implementation
		virtual DWORD Init() override;

		// Main Service Function
		virtual void DoWork() override;

		// Stop Service return non-zero value in current implementation
		virtual DWORD DoStop() override;
	};

	#pragma warning(push)
	#pragma warning(disable: 4251)
	// Antimalware Service Factory Class
	class SLIB_LIB_API AntimalwareServiceFactory : public IServiceFactory {
	private:
		std::shared_ptr<Tracer> tracer;
	public:
		// Constructor
		AntimalwareServiceFactory(std::shared_ptr<Tracer>&);

		// Create AntimalwareService from Factory Class
		virtual std::unique_ptr<Service> Create() override;
	};
	#pragma warning(pop)

}

#endif // AM_SLIB_AMSERVICE_H
